// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  appId String @db.ObjectId

  username     String
  email        String
  passwordHash String
  profile      Json   @default("{}")

  status     String   @default("active")
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())

  roles       UserRole[]  @relation("UserRoles")
  tokens      Token[]     @relation("UserTokens")
  devices     Device[]    @relation("UserDevices")
  application Application @relation("ApplicationUsers", fields: [appId], references: [id])

  @@unique([email, appId], name: "idx_unique_user_email_app_account")
  @@unique([id, appId], name: "idx_unique_user_app_account")
}

model UserRole {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  roleId String @db.ObjectId

  user User @relation("UserRoles", fields: [userId], references: [id])
  role Role @relation("UserRoleToRole", fields: [roleId], references: [id])
}

model Role {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  description String?

  userRoles      UserRole[]       @relation("UserRoleToRole")
  rolePermission RolePermission[] @relation("RolePermissions")
}

model RolePermission {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  roleId       String @db.ObjectId
  permissionId String @db.ObjectId

  role       Role       @relation("RolePermissions", fields: [roleId], references: [id])
  permission Permission @relation("PermissionToRolePermission", fields: [permissionId], references: [id])

  @@unique([roleId, permissionId], name: "idx_unique_role_permission")
}

model Permission {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String  @unique(map: "idx_unique_permission_name")
  description String?

  rolePermissions RolePermission[] @relation("PermissionToRolePermission")
}

model Token {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId   String  @db.ObjectId
  appId    String? @db.ObjectId
  deviceId String? @db.ObjectId

  type      String
  token     String
  expiresAt DateTime
  createdAt DateTime  @default(now())
  revokedAt DateTime?

  user        User         @relation("UserTokens", fields: [userId], references: [id])
  device      Device?      @relation("DeviceTokens", fields: [deviceId], references: [id])
  application Application? @relation("ApplicationTokens", fields: [appId], references: [id])
}

model Device {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  userAgent       String
  deviceType      String?
  ipAddress       String?
  browser         String?
  browserVersion  String?
  os              String?
  osVersion       String?
  deviceVendor    String?
  deviceModel     String?
  engine          String?
  engineVersion   String?
  cpuArchitecture String?
  city            String?
  country         String?
  region          String?
  language        String?
  referer         String?
  isSecure        Boolean?
  timestamp       DateTime @default(now())
  deviceInfo      String?

  user   User    @relation("UserDevices", fields: [userId], references: [id])
  ips    Ip[]    @relation("DeviceIps")
  tokens Token[] @relation("DeviceTokens")
}

model Ip {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  deviceId String @db.ObjectId

  ipAddress String

  device Device @relation("DeviceIps", fields: [deviceId], references: [id])
}

model Application {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String @unique(map: "idx_application_name_unique")

  users  User[]  @relation("ApplicationUsers")
  tokens Token[] @relation("ApplicationTokens")
}
